# helpers/llm_utils.py
import os
from openai import OpenAI

client = OpenAI(
    api_key = os.getenv("OPENAI_API_KEY"),
)

if not client.api_key:
    raise ValueError("API key not found. Please set the OPENAI_API_KEY environment variable.")


def generate_llm_natural_output(plain_summary):
    """
    Uses OpenAI's API to take a plain language summary of data and refine it,
    making it even more user-friendly.
    
    Args:
        plain_summary (str): The summary string generated from the DataFrame's describe().
        
    Returns:
        str: A refined natural language output generated by the LLM.
    """
    prompt = (
    "You are an expert data analyst. The following text is a summary of statistical "
    "results generated from student data. Rewrite the summary in clear, plain language "
    "that is professional and suitable for non-technical stakeholders. The final summary should "
    "describe the key findings in a concise, conversational tone and highlight what the data indicates "
    "about student performance.\n\n"
    f"{plain_summary}\n\n"
    "Refined Summary:"
    )
    
    response = client.responses.create(
    model="gpt-4o",
    input=prompt
    )
    refined_text = response.output_text
    return refined_text

def generate_prediction_report(prediction_data):
    """
    Generates a refined natural language report from the provided prediction data.
    This function constructs a plain summary from the prediction data, creates a specialized prompt
    for prediction reporting, and uses the LLM to produce a detailed, user-friendly report.
    
    Args:
        prediction_data (dict or str): The raw prediction data.
        
    Returns:
        str: A refined natural language report generated by the LLM.
    """
    # Convert prediction data to a summary string if it's not already a string
    if not isinstance(prediction_data, str):
        plain_summary = "Prediction Data: " + ", ".join(f"{key}: {value}" for key, value in prediction_data.items())
    else:
        plain_summary = prediction_data

    # Create a separate prompt for generating a prediction report.
    prompt = (
        f"""
        Role: "IMPORTANT ALWAYS RESPOND IN MARKDOWN LANGUAGE USING BOLD FOR HEADINGS.
            You are an expert educational analyst specializing in student success prediction and behavioral insights. Your role is to generate a professional, clear, and actionable natural-language summary for educators and stakeholders based on provided prediction results, student engagement metrics, and behavioral clustering insights.

            Context for Interpretation:
            The prediction provided to you is based on early student engagement (first 30 days of participation) and initial onboarding performance. The goal is to predict whether a student is likely to succeed in the online tutoring program, allowing early interventions to improve their outcomes.

            Data and Features Explained:
            You will see these specific features for each student:

            Onboarding Test Score: The student's initial entry assessment score upon joining the program (scores typically range from 50 to 95).

            Classes Attended: Number of classes attended out of 18 possible classes within the first 30 days.

            Homework Submission Rate: Percentage of homework assignments completed (ranges from 55% to 98%).

            Hours on Platform: Total hours spent actively engaged on the online learning platform in the first 30 days (ranges from 18 to 47 hours).

            Participation Score: Subjective engagement rating assigned by instructors based on active class participation (scale from 3 to 10).

            Cluster Assignment: Students have been categorized into one of four behavioral groups derived from their engagement patterns:

            High Achievers: Excellent overall engagement and performance. = Cluster #3

            Consistent Performers: Strong, reliable engagement and good performance. = Cluster #2

            Steady Learners: Moderate engagement, typical steady progress. = Cluster #1

            Struggling Learners: Lower engagement, indicating higher risk of poor outcomes. = Cluster #0

            Interpreting the Prediction (Logistic Regression):
            The student's likelihood of success is predicted using logistic regression. The relative importance (coefficients) of each feature from most influential to least influential in predicting success is as follows:

            Homework Submission Rate (most influential)

            Hours on Platform

            Onboarding Test Score

            Classes Attended

            Participation Score

            Cluster Assignment (provides contextual understanding of student behavior type)

            Higher values on these metrics (especially homework submission rate and hours on platform) significantly increase the likelihood of student success. Conversely, lower values indicate a higher risk of the student struggling in the program.

            Your Task:
            Given the student’s prediction results and associated metrics, provide a non-technical, professional, and insightful summary that includes:

            Clear interpretation of the student’s predicted performance (success or at-risk).

            Identification and explanation of key strengths and areas of concern based on the student's engagement data.

            Explanation of how their assigned cluster (behavioral group) provides additional context about their learning behavior and engagement patterns.

            Actionable recommendations tailored specifically to the student's profile to help improve their likelihood of success, emphasizing the most influential factors (homework submission, platform engagement, etc.).

            Focus on making your report practical, concise, and helpful for educators and program coordinators. :::: Next I will provide you will the prediction data for a specific student.
            Prediction Data:
            {plain_summary}
            :::::: End of Prediction Data
            Your Report:"
        """
    )
    
    response = client.responses.create(
        model="gpt-4.5-preview",
        input=prompt
    )
    refined_report = response.output_text
    return refined_report