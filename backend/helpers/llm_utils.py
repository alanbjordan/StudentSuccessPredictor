# helpers/llm_utils.py
import os
from openai import OpenAI

client = OpenAI(
    api_key = os.getenv("OPENAI_API_KEY"),
)

if not client.api_key:
    raise ValueError("API key not found. Please set the OPENAI_API_KEY environment variable.")


def generate_llm_natural_output(plain_summary):
    """
    Uses OpenAI's API to take a plain language summary of data and refine it,
    making it even more user-friendly.
    
    Args:
        plain_summary (str): The summary string generated from the DataFrame's describe().
        
    Returns:
        str: A refined natural language output generated by the LLM.
    """
    prompt = (
    "You are an expert data analyst. The following text is a summary of statistical "
    "results generated from student data. Rewrite the summary in clear, plain language "
    "that is professional and suitable for non-technical stakeholders. The final summary should "
    "describe the key findings in a concise, conversational tone and highlight what the data indicates "
    "about student performance.\n\n"
    f"{plain_summary}\n\n"
    "Refined Summary:"
    )
    
    response = client.responses.create(
    model="gpt-4o",
    input=prompt
    )
    refined_text = response.output_text
    return refined_text

def generate_prediction_report(prediction_data):
    """
    Generates a refined natural language report from the provided prediction data.
    This function constructs a plain summary from the prediction data, creates a specialized prompt
    for prediction reporting, and uses the LLM to produce a detailed, user-friendly report.
    
    Args:
        prediction_data (dict or str): The raw prediction data.
        
    Returns:
        str: A refined natural language report generated by the LLM.
    """
    # Convert prediction data to a summary string if it's not already a string
    if not isinstance(prediction_data, str):
        plain_summary = "Prediction Data: " + ", ".join(f"{key}: {value}" for key, value in prediction_data.items())
    else:
        plain_summary = prediction_data

    # Create a separate prompt for generating a prediction report.
    prompt = (
        f"""
        Role: "IMPORTANT ALWAYS RESPOND IN MARKDOWN LANGUAGE USING BOLD FOR HEADINGS.
            You are an expert educational analyst specializing in student success prediction and behavioral insights. Your role is to generate a professional, clear, and actionable natural-language summary for educators and stakeholders based on provided prediction results, student engagement metrics, and behavioral clustering insights.

            Context for Interpretation:
            The prediction provided to you is based on early student engagement (first 30 days of participation) and initial onboarding performance. The goal is to predict whether a student is likely to succeed in the online tutoring program, allowing early interventions to improve their outcomes.

            Data and Features Explained:
            You will review these specific features for each student:

            Onboarding Test Score: The student's initial assessment score upon joining the program (range typically 50% to 95%).

            Classes Attended: Number of classes attended within the first 30 days (out of 18 total classes).

            Homework Submission Rate: Percentage of homework assignments completed (range typically 55% to 98%).

            Hours on Platform: Total hours actively spent on the online learning platform in the first 30 days (range typically 18 to 47 hours).

            Participation Score: Instructor-assigned rating based on active participation (scale 3 to 10).

            Cluster Assignment: Students have been categorized into four distinct engagement-based groups derived from their behaviors:

            Highly Engaged Achievers (Cluster #3): Consistently exceptional performance, very high engagement, and strong motivation.

            Steady Performers (Cluster #2): Solid and dependable engagement with good overall performance, positioned well for success.

            Moderately Engaged Learners (Cluster #1): Good academic metrics with room to increase active participation and platform engagement.

            At-Risk Learners (Cluster #0): Low engagement, attendance, and homework completion, indicating a higher risk of academic difficulties and the need for targeted intervention.

            Interpreting the Prediction (Logistic Regression):
            The student's likelihood of success is predicted using logistic regression. The relative importance of features (from most influential to least influential) is:

            Homework Submission Rate (most influential)

            Hours on Platform

            Onboarding Test Score

            Classes Attended

            Participation Score

            Cluster Assignment (provides additional context about student behavior)

            Higher scores in homework submission, platform engagement, and onboarding test results significantly increase the likelihood of success. Lower values indicate a greater risk of academic difficulty.

            Your Task:
            Given the student’s prediction results and engagement metrics, provide a professional, insightful, non-technical summary, including:

            Clear interpretation of the student's predicted outcome (success or at-risk).

            Identification and explanation of key strengths and specific areas of concern based on engagement metrics.

            Do not disucss Contextual insights based on their behavioral cluster, highlighting the implications of their identified engagement profile.

            Practical, actionable recommendations explicitly tailored to the student’s identified strengths and concerns, emphasizing the most influential metrics such as homework submission and platform engagement.

            Your summary should be concise, practical, insightful, and directly useful for educators and program coordinators to guide immediate actions for improving student outcomes.
            Prediction Data:
            {plain_summary}
            :::::: End of Prediction Data
            Your Report:"
        """
    )
    
    response = client.responses.create(
        model="gpt-4o",
        input=prompt
    )
    refined_report = response.output_text
    return refined_report